syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "v1/model.proto";

option java_multiple_files = true;
option java_package = "gov.nist.csd.pm.proto.v1.query";

package gov.nist.csd.pm.proto.v1.query;

// PolicyQueryService provides methods for querying an NGAC policy.
service PolicyQueryService {
  // graph queries
  rpc NodeExists(IdOrNameQuery) returns (google.protobuf.BoolValue);
  rpc GetNode(IdOrNameQuery) returns (gov.nist.csd.pm.proto.v1.model.Node);
  rpc GetNodeId(IdOrNameQuery) returns (google.protobuf.BoolValue);
  rpc SearchNodes(SearchQuery)  returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc GetPolicyClasses(google.protobuf.Empty) returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc GetAdjacentDescendants(GetAdjacentAssignmentsQuery) returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc GetAdjacentAscendants(GetAdjacentAssignmentsQuery) returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc GetAssociationsWithSource(GetAssociationsQuery) returns (gov.nist.csd.pm.proto.v1.model.AssociationList);
  rpc GetAssociationsWithTarget(GetAssociationsQuery) returns (gov.nist.csd.pm.proto.v1.model.AssociationList);
  rpc GetAscendantSubgraph(GetSubgraphQuery) returns (Subgraph);
  rpc GetDescendantSubgraph(GetSubgraphQuery) returns (Subgraph);
  rpc GetAttributeDescendants(GetDescendantsQuery) returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc GetPolicyClassDescendants(GetDescendantsQuery) returns (gov.nist.csd.pm.proto.v1.model.NodeList);
  rpc IsAscendant(ContainmentQuery) returns (google.protobuf.BoolValue);
  rpc IsDescendant(ContainmentQuery) returns (google.protobuf.BoolValue);

  // prohibition queries
  rpc GetProhibitions(google.protobuf.Empty) returns (gov.nist.csd.pm.proto.v1.model.ProhibitionList);
  rpc GetProhibitionsBySubject(GetProhibitionBySubjectQuery) returns (gov.nist.csd.pm.proto.v1.model.ProhibitionList);
  rpc GetProhibition(GetByNameQuery) returns (gov.nist.csd.pm.proto.v1.model.Prohibition);
  rpc GetInheritedProhibitions(GetInheritedProhibitionsQuery) returns (gov.nist.csd.pm.proto.v1.model.ProhibitionList);
  rpc GetProhibitionsWithContainer(GetProhibitionsWithContainerQuery) returns (gov.nist.csd.pm.proto.v1.model.ProhibitionList);

  // obligation queries
  rpc GetObligations(google.protobuf.Empty) returns (gov.nist.csd.pm.proto.v1.model.ObligationList);
  rpc GetObligation(GetByNameQuery) returns (gov.nist.csd.pm.proto.v1.model.Obligation);
  rpc GetObligationsByAuthor(GetObligationByAuthorQuery) returns (gov.nist.csd.pm.proto.v1.model.Obligation);

  // operation queries
  rpc GetResourceOperations(google.protobuf.Empty) returns (gov.nist.csd.pm.proto.v1.model.StringList);
  rpc GetAdminOperationSignatures(google.protobuf.Empty) returns (SignatureList);
  rpc GetAdminOperationSignature(GetByNameQuery) returns (Signature);

  // routine queries
  rpc GetAdminRoutineSignatures(google.protobuf.Empty) returns (SignatureList);
  rpc GetAdminRoutineSignature(GetByNameQuery) returns (Signature);

  // access queries
  rpc ComputePrivileges(ComputePrivilegesQuery) returns (gov.nist.csd.pm.proto.v1.model.StringList);
  rpc ComputeDeniedPrivileges(ComputeDeniedPrivilegesQuery) returns (gov.nist.csd.pm.proto.v1.model.StringList);
  rpc ComputeCapabilityList(ComputeCapabilityListQuery) returns (AccessQueryMapping);
  rpc ComputeACL(ComputeACLQuery) returns (AccessQueryMapping);
  rpc ComputeDestinationAttributes(ComputeDestinationAttributesQuery) returns (AccessQueryMapping);
  rpc ComputeSubgraphPrivileges(AccessWithRootQuery) returns (SubgraphPrivileges);
  rpc ComputeAdjacentAscendantPrivileges(AccessWithRootQuery) returns (NodePrivilegeList);
  rpc ComputeAdjacentDescendantPrivileges(AccessWithRootQuery) returns (NodePrivilegeList);
  rpc Explain(ExplainQuery) returns (ExplainResponse);
  rpc ComputePersonalObjectSystem(ComputePOSQuery) returns (NodePrivilegeList);

  // self (caller) access queries
  rpc SelfComputePrivileges(TargetContext) returns (gov.nist.csd.pm.proto.v1.model.StringList);
  rpc SelfComputeSubgraphPrivileges(SelfAccessWithRootQuery) returns (SubgraphPrivileges);
  rpc SelfComputeAdjacentAscendantPrivileges(SelfAccessWithRootQuery) returns (NodePrivilegeList);
  rpc SelfComputeAdjacentDescendantPrivileges(SelfAccessWithRootQuery) returns (NodePrivilegeList);
  rpc SelfComputePersonalObjectSystem(google.protobuf.Empty) returns (NodePrivilegeList);
}

message IdOrNameQuery {
  oneof idOrName {
    int64 id = 1;
    string name = 2;
  }
}

message SearchQuery {
  gov.nist.csd.pm.proto.v1.model.NodeType type = 1;
  map<string, gov.nist.csd.pm.proto.v1.model.Value> properties = 2;
}

message GetAdjacentAssignmentsQuery {
  int64 node_id = 1;
}

message GetAssociationsQuery {
  int64 node_id = 1;
}

message GetSubgraphQuery {
  int64 node_id = 1;
}
message Subgraph {
  gov.nist.csd.pm.proto.v1.model.Node node = 1;
  repeated Subgraph subgraph = 2;
}

message GetDescendantsQuery {
  int64 node_id = 1;
}

message ContainmentQuery {
  int64 ascendant_id = 1;
  int64 descendant_id = 2;
}

message ObligationExistsQuery {
  string name = 1;
}

message GetObligationByAuthorQuery {
  int64 author_id = 1;
}

message GetByNameQuery {
  string name = 1;
}

message GetProhibitionBySubjectQuery {
  oneof subject {
    int64 node_id = 1;
    string process = 2;
  }
}

message GetInheritedProhibitionsQuery {
  int64 subject_id = 1;
}

message GetProhibitionsWithContainerQuery {
  int64 container_id = 1;
}

message UserContext {
  oneof user {
    int64 id = 1;
    IdList attributes = 2;
  }
  optional string process = 3;
}

message TargetContext {
  oneof target {
    int64 id = 1;
    IdList attributes = 2;
  }
}

message IdList {
  repeated int64 ids = 1;
}

message ComputePrivilegesQuery {
  UserContext user_ctx = 1;
  TargetContext target_ctx = 2;
}

message ComputeDeniedPrivilegesQuery {
  UserContext user_ctx = 1;
  TargetContext target_ctx = 2;
}

message ComputeCapabilityListQuery {
  UserContext user_ctx = 1;
}

message ComputeACLQuery {
  TargetContext target_ctx = 1;
}

message ComputeDestinationAttributesQuery {
  UserContext user_ctx = 1;
}

message AccessQueryMapping {
  map<int64, AccessQueryMappingEntry> map = 1;
}

message AccessQueryMappingEntry {
  gov.nist.csd.pm.proto.v1.model.Node node = 1;
  repeated string arset = 2;
}

message AccessWithRootQuery {
  UserContext user_ctx = 1;
  int64 root = 2;
}

message ExplainQuery {
  UserContext user_ctx = 1;
  TargetContext target_ctx = 2;
}

message ComputePOSQuery {
  UserContext user_ctx = 1;
}

message SubgraphPrivileges {
  gov.nist.csd.pm.proto.v1.model.Node node = 1;
  repeated string arset = 2;
  repeated SubgraphPrivileges ascendants = 3;
}

message NodePrivilege {
  gov.nist.csd.pm.proto.v1.model.Node node = 1;
  repeated string arset = 2;
}

message Path {
  repeated gov.nist.csd.pm.proto.v1.model.Node nodes = 1;
}

message ExplainAssociation {
  gov.nist.csd.pm.proto.v1.model.Node ua = 1;
  repeated string arset = 2;
  repeated Path user_paths = 3;
}

message ExplainNode {
  gov.nist.csd.pm.proto.v1.model.Node node = 1;
  repeated ExplainAssociation associations = 2;
}

message ExplainNodePath {
  repeated ExplainNode nodes = 1;
}

message PolicyClassExplain {
  gov.nist.csd.pm.proto.v1.model.Node pc = 1;
  repeated string arset = 2;
  repeated ExplainNodePath paths = 3;
}

message ExplainResponse {
  repeated string privileges = 1;
  repeated PolicyClassExplain policy_classes = 2;
  repeated string denied_privileges = 3;
  repeated gov.nist.csd.pm.proto.v1.model.Prohibition prohibitions = 4;
}

message NodePrivilegeList {
  repeated NodePrivilege privileges = 1;
}

message SelfAccessWithRootQuery {
  int64 root = 1;
}

message SignatureList {
  repeated Signature signatures = 1;
}

message Signature {
  string name = 1;
  repeated Param params = 2;
}

message Param {
  string name = 1;
  ParamType type = 2;
}

message ParamType {
  oneof type {
    StringType string_type = 1;
    LongType long_type = 2;
    BooleanType boolean_type = 3;
    ListType list_type = 4;
    MapType map_type = 5;
    AnyType any_type = 6;
  }
}

message StringType {}

message LongType {}

message BooleanType {}

message ListType {
  ParamType element_type = 1;
}

message MapType {
  ParamType key_type = 1;
  ParamType value_type = 2;
}

message AnyType {}